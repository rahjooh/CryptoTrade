name: cryptoflow CI/CD

on:
  push:
    branches: ["main"]
  pull_request:

jobs:
  test-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.22"
      - name: Install deps
        run: go mod download
      - name: Run tests
        run: go test -v ./...
      - name: Build binary
        run: go build -o cryptoflow .

  smoke-ssh:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: SSH reachability check
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            whoami
            hostname
            echo "ok: ssh works"

  deploy-ec2:
    runs-on: ubuntu-latest
    needs: [test-build, smoke-ssh]
    if: github.ref == 'refs/heads/main'
    env:
      REPO: ${{ github.repository }}   # e.g. username/cryptoflow
    steps:
      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          # pass env(s) into the remote session
          envs: REPO,AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY,AWS_REGION,S3_BUCKET
          script: |
            set -euo pipefail
            APP_DIR="/home/${{ secrets.EC2_USER }}/cryptoflow"
            mkdir -p "$APP_DIR"
            cd "$APP_DIR"

            # first-time clone if directory isn't a git repo
            if [ ! -d .git ]; then
              echo "Cloning $REPO into $APP_DIR"
              git clone "git@github.com:${REPO}.git" . || git clone "https://github.com/${REPO}.git" .
            fi

            # ensure remote points to SSH (works if you added a Deploy Key on EC2; falls back to https if public)
            git remote set-url origin "git@github.com:${REPO}.git" || true

            # fetch and fast-forward to main
            git fetch origin main
            git checkout -B main origin/main
            git pull --rebase origin main

            # run your stack (compose v2 preferred)
            if command -v docker >/dev/null 2>&1 && docker compose version >/dev/null 2>&1; then
              docker compose down || true
              docker compose up -d --build
            elif command -v docker-compose >/dev/null 2>&1; then
              docker-compose down || true
              docker-compose up -d --build
            else
              echo "Docker/Compose not installed. Install them once, then re-run."
              exit 1
            fi

            echo "âœ… Deploy complete"
