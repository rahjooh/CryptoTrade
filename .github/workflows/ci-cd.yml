name: cryptoflow CI/CD

on:
  push:
    branches: ["main", "s3-table"]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  test-build:
    name: Test & Build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: write
    env:
      LOG_LEVEL: ${{ vars.LOG_LEVEL }}
    steps:
      - name: Show ref info
        run: |
          echo "ref=${{ github.ref }}"
          echo "ref_name=${{ github.ref_name }}"
          echo "event=${{ github.event_name }}"

      - uses: actions/checkout@v4

      - name: Clean Go module cache
        run: rm -rf ~/go/pkg/mod || true

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.22"
          cache: true
          cache-dependency-path: go.sum

      # This step configures git to use the private Go module PAT.
      - name: Configure Git PAT token for private modules
        run: git config --global url.https://${{ secrets.GO_PAT }}@github.com.insteadOf https://github.com

      - name: Install deps
        run: go mod download

      - name: Run tests
        run: go test -v ./...

      - name: Build binary
        run: go build -o cryptoflow .

      - name: Remove cached Go toolchains
        if: always()
        run: |
          set -euo pipefail

          if ! command -v go >/dev/null 2>&1; then
            echo "Go binary not available; skipping toolchain cleanup."
            exit 0
          fi

          MODCACHE=$(go env GOMODCACHE)
          TOOLCHAIN_PARENT="$MODCACHE/golang.org"

          if [ ! -d "$TOOLCHAIN_PARENT" ]; then
            echo "No golang.org directory in module cache; nothing to prune."
            exit 0
          fi

          found=0
          while IFS= read -r -d '' dir; do
            echo "Removing cached Go toolchain directory: $dir"
            rm -rf "$dir"
            found=1
          done < <(find "$TOOLCHAIN_PARENT" -maxdepth 1 -type d -name 'toolchain@*' -print0)

          if [ "$found" -eq 0 ]; then
            echo "No downloaded Go toolchains found in module cache."
          fi

      - name: Cleanup old binary artifacts
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const maxArtifactsToKeep = 5;
            const artifacts = await github.paginate(
              github.rest.actions.listArtifactsForRepo,
              {
                owner: context.repo.owner,
                repo: context.repo.repo,
                per_page: 100,
              },
              (response) => response.data.artifacts ?? []
            );

            const binaryArtifacts = artifacts
              .filter((artifact) => artifact.name === "cryptoflow-binary" && !artifact.expired)
              .sort((a, b) => new Date(b.created_at) - new Date(a.created_at));

            const artifactsToDelete = binaryArtifacts.slice(maxArtifactsToKeep);

            core.info(
              `Found ${binaryArtifacts.length} cryptoflow-binary artifacts. Keeping ${binaryArtifacts.length - artifactsToDelete.length} latest and deleting ${artifactsToDelete.length}.`
            );

            for (const artifact of artifactsToDelete) {
              core.info(`Deleting artifact ${artifact.id} created at ${artifact.created_at}`);
              await github.rest.actions.deleteArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id,
              });
            }

            core.info('Cleanup complete.');

      # This step stores the built binary as an artifact.
      # The deploy job will download this exact file, ensuring
      # consistency between build and deployment.
      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: cryptoflow-binary
          path: cryptoflow
          retention-days: 7



  test-ssh:
    name: Test SSH
    runs-on: ubuntu-latest
    steps:
      - name: SSH reachability check
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            whoami
            hostname
            echo "ok: ssh works"

  deploy-main:
    name: Deploy (main)
    runs-on: ubuntu-latest
    # This job now depends on a successful build.
    needs: [test-build, test-ssh]
    if: ${{ github.ref_name == 'main' }}
    env:
      AWS_ACCESS_KEY_ID:     ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION:            ${{ vars.AWS_REGION }}
      S3_BUCKET:             ${{ vars.S3_BUCKET }}
      S3_TABLE_ARN:          ${{ secrets.S3_TABLE_ARN }}
      LOG_LEVEL:             ${{ vars.LOG_LEVEL }}
      DASHBOARD_NAME:        Data

    steps:
      # Download the binary that was built and tested in the previous job.
      - name: Download binary artifact
        uses: actions/download-artifact@v4
        with:
          name: cryptoflow-binary

      # Checkout the code to get the docker-compose.yml file.
      - name: Checkout code for docker-compose
        uses: actions/checkout@v4

      - name: Prepare remote workspace
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -euo pipefail
            APP_DIR="/home/${{ secrets.EC2_USER }}/cryptoflow"
            mkdir -p "$APP_DIR"
            cd "$APP_DIR"

            if command -v git >/dev/null 2>&1 && [ -d .git ]; then
              git reset --hard HEAD
              git clean -fd
            else
              find . -mindepth 1 -maxdepth 1 ! -name '.env' ! -name 'data' -exec rm -rf {} +
            fi

      - name: Transfer files to EC2 via SCP
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: ".,cryptoflow" # This will copy all files from root and the cryptoflow binary
          target: "/home/${{ secrets.EC2_USER }}/cryptoflow"

      - name: Deploy on EC2 via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          envs: REPO,AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY,AWS_REGION,S3_BUCKET,S3_TABLE_ARN,LOG_LEVEL
          script: |
            set -euo pipefail
            APP_DIR="/home/${{ secrets.EC2_USER }}/cryptoflow"
            cd "$APP_DIR"
            
            # Stop the running container(s)
            docker compose down --rmi all --volumes || true
            docker system prune -af --volumes || true
            
            
            # Start the container(s) with the newly transferred files
            docker compose up -d --build
            
            echo "âœ… Deploy complete"

      - name: Configure AWS creds
        if: contains(github.event.head_commit.message, '[CWdash]')
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Resolve collector InstanceId
        if: contains(github.event.head_commit.message, '[CWdash]')
        id: ec2
        run: |
          IID=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=Collector Test 2" "Name=instance-state-name,Values=running" \
            --query "Reservations[].Instances[].InstanceId" --output text)
          if [ -z "$IID" ]; then echo "No running collector instance found"; exit 1; fi
          echo "instance_id=$IID" >> "$GITHUB_OUTPUT"

      - name: Inject InstanceId into dashboard JSON
        if: contains(github.event.head_commit.message, '[CWdash]')
        run: |
          cp internal/metrics/CWdash.json /tmp/dashboard.json
          sed -i "s|<collector-instance-id>|${{ steps.ec2.outputs.instance_id }}|g" /tmp/dashboard.json

      - name: Put dashboard
        if: contains(github.event.head_commit.message, '[CWdash]')
        run: |
          aws cloudwatch put-dashboard \
            --dashboard-name "$DASHBOARD_NAME" \
            --dashboard-body file:///tmp/dashboard.json

      - name: Validate
        if: contains(github.event.head_commit.message, '[CWdash]')
        run: |
          aws cloudwatch get-dashboard --dashboard-name "$DASHBOARD_NAME" \
            --query 'DashboardValidationMessages' --output table
