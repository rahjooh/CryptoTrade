name: cryptoflow CI/CD

on:
  push:
    branches: ["main", "s3-table"]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  test-build:
    name: Test & Build
    runs-on: ubuntu-latest
    env:
      LOG_LEVEL: ${{ vars.LOG_LEVEL }}
    steps:
      - name: Show ref info
        run: |
          echo "ref=${{ github.ref }}"
          echo "ref_name=${{ github.ref_name }}"
          echo "event=${{ github.event_name }}"

      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.22"
          cache: true
          cache-dependency-path: go.sum

      - name: Configure Git PAT token for private modules
        run: git config --global url.https://${{ secrets.GO_PAT }}@github.com.insteadOf https://github.com

      - name: Install deps
        run: go mod download

      - name: Run tests
        run: go test -v ./...

      - name: Build binary
        run: go build -o cryptoflow .

      # This step stores the built binary as an artifact.
      # The deploy job will download this exact file, ensuring
      # consistency between build and deployment.
      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: cryptoflow-binary
          path: cryptoflow



  test-ssh:
    name: Test SSH
    runs-on: ubuntu-latest
    steps:
      - name: SSH reachability check
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            whoami
            hostname
            echo "ok: ssh works"

  deploy-main:
    name: Deploy (main)
    runs-on: ubuntu-latest
    # This job now depends on a successful build.
    needs: [test-build]
    if: ${{ github.ref_name == 'main' }}
    env:
      AWS_ACCESS_KEY_ID:     ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION:            ${{ vars.AWS_REGION }}
      S3_BUCKET:             ${{ vars.S3_BUCKET }}
      S3_TABLE_ARN:          ${{ secrets.S3_TABLE_ARN }}
      LOG_LEVEL:             ${{ vars.LOG_LEVEL }}

    steps:
      # Download the binary that was built and tested in the previous job.
      - name: Download binary artifact
        uses: actions/download-artifact@v4
        with:
          name: cryptoflow-binary

      # Checkout the code to get the docker-compose.yml file.
      - name: Checkout code for docker-compose
        uses: actions/checkout@v4

      - name: Transfer files to EC2 via SCP
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "cryptoflow,docker-compose.yml" # Comma-separated list of files
          target: "/home/${{ secrets.EC2_USER }}/cryptoflow"

      - name: Deploy on EC2 via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          envs: REPO,AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY,AWS_REGION,S3_BUCKET,S3_TABLE_ARN,LOG_LEVEL
          script: |
            set -euo pipefail
            APP_DIR="/home/${{ secrets.EC2_USER }}/cryptoflow"
            cd "$APP_DIR"
            
            # Stop the running container(s)
            docker compose down || true
            
            # Start the container(s) with the newly transferred files
            docker compose up -d
            
            echo "âœ… Deploy complete"
