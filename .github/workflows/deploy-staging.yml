name: Deploy Staging (manual)

on:
  workflow_dispatch:
    inputs:
      confirm:
        description: "Type 'deploy' to ship the staging release"
        required: true
        default: deploy

concurrency:
  group: deploy-staging
  cancel-in-progress: false

permissions:
  contents: read

jobs:
  build-and-deploy:
    name: Build & Deploy to staging
    if: github.ref == 'refs/heads/main' && github.event.inputs.confirm == 'deploy'
    runs-on: ubuntu-latest
    environment:
      name: staging
    env:
      APP_DIR: /home/${{ secrets.EC2_USER }}/cryptoflow
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: false

      - name: Download dependencies
        run: go mod download

      - name: Run tests
        run: go test ./...

      - name: Build binary
        run: go build -o cryptoflow .

      - name: Ensure remote workspace exists
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -euo pipefail
            mkdir -p "$APP_DIR"
            cd "$APP_DIR"
            find . -mindepth 1 -maxdepth 1 ! -name '.env' ! -name 'data' -exec rm -rf {} +

      - name: Upload application bundle
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: ".,cryptoflow"
          target: "$APP_DIR"

      - name: Restart services
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -euo pipefail
            cd "$APP_DIR/infra/docker"
            export APP_ENV=staging
            if docker compose version >/dev/null 2>&1; then
              COMPOSE_BIN="docker compose"
            elif command -v docker-compose >/dev/null 2>&1; then
              COMPOSE_BIN="docker-compose"
            else
              echo "Docker Compose is not installed on the target host." >&2
              exit 1
            fi
            # shellcheck disable=SC2086
            $COMPOSE_BIN down --remove-orphans || true
            # shellcheck disable=SC2086
            $COMPOSE_BIN up -d --build

